#!/bin/bash

##############
# Git extension script which adds simplisitic mirroring from a git repo to a p4 repo
#

export P4IGNORE=.p4ignore
p4g_param () { git config git-p4.${2} | sed -En "s/^(.+)$/${1} \1/p"; }
p4g () { 
    if [ ! -f "${P4IGNORE}" ]; then
        echo ".p4ignore" > "${P4IGNORE}"
        echo ".git" >> "${P4IGNORE}"
    fi
    p4 $(p4g_param -p port) $(p4g_param -u user) $(p4g_param -P password) $(p4g_param -c client) "$@"
}
p4g_replay () {
    echo "Replaying git commit '${1}' to perforce..."
    git reset --hard ${1} && git clean -f -d -e ${P4IGNORE} || return $?
    p4g reconcile -f ... || return $?
    p4g revert -a ... || return $?
    if [ $(p4g opened -c default -m 1 ... | wc -l) -gt 0 ]; then
        p4g submit -d "$(git log --abbrev-commit -1 ${1})" || return $?
    fi
    return 0
}

p4g_init () {
    _src="${1}"; _dir="${2-$(basename "${_src}" | sed -e 's/\.git$//g')}"
    [ -n "${_src}" -a -n "${_dir}" ] || return 1;
    git clone "${_src}" "${_dir}" || return $?

    echo -n "Perforce port (perforce:1666) : "; read _port
    _port="${_port:-perforce:1666}"; git -C "${_dir}" config git-p4.port ${_port} || return $?

    echo -n "Perforce user ($(whoami)) : "; read _user
    _user="${_user:-$(whoami)}"; git -C "${_dir}" config git-p4.user ${_user} || return $?

    unset _pass
    while [ -z "${_pass}" ]; do echo -n "Perforce password : "; read -s _pass; echo ""; done
    git -C "${_dir}" config git-p4.password ${_pass} || return $?
    unset _pass

    echo -n "Perforce client ($(hostname)-git-p4-${_dir}) : "; read _client
    _client="${_client:-$(hostname)-git-p4-${_dir}}"; git -C "${_dir}" config git-p4.client ${_client} || return $?

    cd "${_dir}"
    p4g revert -k ... &>/dev/null
    p4g client -d ${_client} &>/dev/null
    echo -n "Press <return> to edit the perforce client"; read
    p4g client || return $?
    cd ->/dev/null
    p4g_update "${_dir}"
}

is_valid () {
    git -C "${1}" remote 2>&1 | grep '^origin$' &>/dev/null && \
    git -C "${1}" config --get git-p4.port &>/dev/null && \
    git -C "${1}" config --get git-p4.user &>/dev/null && \
    git -C "${1}" config --get git-p4.password &>/dev/null && \
    git -C "${1}" config --get git-p4.client &>/dev/null && return 0
    echo "${1} is not a p4g directory" >&2; return 1;
}
p4g_update () {
    if [ -n "${1}" ]; then
        is_valid "${1}" || return $?
        echo "Updating p4g '${1}'..."
        cd "${1}"
        p4g client -o | sed -e 's/noallwrite/allwrite/g' | p4g client -i >/dev/null || { cd ->/dev/null; return 1; }
        p4g sync -f -q ... || { cd ->/dev/null; return 1; }
        LAST_GIT="$(p4g -z tag changes -m 1 -l ... | sed -En 's/^\.\.\. desc commit ([0-9a-f]+).*$/\1/p')"
        [ -n "${LAST_GIT}" ] || LAST_GIT="origin/master"
        git fetch origin || { cd ->/dev/null; return 1; }
        for i in ${LAST_GIT} $(git log --reverse --first-parent --abbrev-commit --pretty=oneline \
                               ${LAST_GIT}..origin/master | cut -d' ' -f1); do
            p4g_replay ${i} || { cd ->/dev/null; return 1; }
        done
        git reset --hard origin/master &>/dev/null && git clean -f -d -e ${P4IGNORE} &>/dev/null
        cd ->/dev/null
        echo ""; return 0
    fi
    if is_valid "." 2>/dev/null; then 
        p4g_update .; return $?
    else
        unset _found;
        for _p4g in `find . -maxdepth 2 -type d -name .git -exec dirname {} \; 2>/dev/null`; do
            if is_valid "${_p4g}"; then
                p4g_update "${_p4g}" || return $?
                _found=1
            fi
        done
        [ -z "${_found}" ] && { echo "$(pwd) does not contain p4g directories"; return 1; }
        return 0
    fi
}

CMD="${1}"
if [ -z "${1}" ]; then
    echo ""
    echo "Usage: git-p4g init <source_repo_url> [local_directory]"
    echo "       git-p4g update [local_directory]"
    echo "       git-p4g [p4-opts...] <p4-cmd> [p4-cmd-opts...]"
    echo ""
    echo "On initialization, the local directory name is taken from the"
    echo "source_repo_url, if it is not specified."
    echo ""
    echo "If update is executed within a directory that contains multiple p4g"
    echo "repositories, then the update command will be executed for each one."
    echo ""
    echo "Any other options are passed through directly to the p4 command line"
    echo "with the values that are specified by git-config (during init)."
    echo ""
    exit 1    
fi
case "${CMD}" in
    'init')
        shift
        p4g_init $@ && exit 0
        ;;
    'update')
        shift
        p4g_update $@ && exit 0
        ;;
    *)
        p4g "$@"
        exit $?
        ;;
esac

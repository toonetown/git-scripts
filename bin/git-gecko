#!/bin/bash

git_gecko_list () {
    git fetch || return $?
    git branch | sed -nE 's|^\*? *_upstream_/([^ ]+)$|\1|p'
}

git_gecko_reset () {
    git fetch || return $?
    for i in $(git branch -vv | sed -nE 's|^\*? *([^ ]+) +[^ ]+ +\[([a-zA-Z0-9_/-]+).*|\1\|\2|p'); do
        _BRANCH="$(echo ${i} | cut -d'|' -f1)"
        _ORIGIN="$(echo ${i} | cut -d'|' -f2)"
        
        echo ""
        echo "----------------------"
        echo "Resetting ${_BRANCH} to ${_ORIGIN}..."
        echo "----------------------"
        
        git checkout ${_BRANCH} || return $?
        git reset --hard ${_ORIGIN} || return $?
    done
}

git_gecko_check_branch () {
    git branch | grep -q " ${1}$" || { echo ""; echo "No branch named '${1}'"; return 1; }
}

git_gecko_update_upstream () {
    _VERSION="$(echo ${1} | cut -d'-' -f1)"
    _BRANCH="$(echo ${1} | cut -d'-' -f2)"
    _UPSTREAM="_upstream_/${_VERSION}-${_BRANCH}"
    git_gecko_check_branch ${_UPSTREAM} || return $?

    # Update the upstream
    echo ""
    echo "----------------------"
    echo "Updating ${_UPSTREAM}..."
    echo "----------------------"
    git checkout ${_UPSTREAM} || return $?
    git pull || return $?
    grep -q "MOZ_APP_VERSION=${_VERSION}\." mobile/android/confvars.sh || { 
        echo "Version is no longer ${_VERSION}"
        return 1
    }
}

git_gecko_latest () {
    _LATEST="${1}"
    _FF="firefox-${2}/master"
    for i in ${_FF} ${_LATEST}; do
        git_gecko_check_branch ${i} || return $?
    done
    git checkout ${_LATEST} || return $?
    git merge -s ours --no-edit ${_FF} || return $?
    if [ $(git diff --name-only ${_FF} | head -n1 | wc -l) -gt 0 ]; then
        git diff --binary ${_FF} | git apply -R --whitespace=nowarn --index || return $?
        git commit -m "Bring ${_LATEST} up-to-date with ${_FF}" || return $?
    fi
}

git_gecko_update () {
    if [ "${1}" == "all" ]; then
        git fetch || return $?
        for i in $(git_gecko_list); do
            git_gecko_update ${i} || return $?
        done
        return $?
    fi
    _VERSION="$(echo ${1} | cut -d'-' -f1)"
    _BRANCH="$(echo ${1} | cut -d'-' -f2)"
    
    # Make sure we have all the branches needed
    _UPSTREAM="_upstream_/${_VERSION}-${_BRANCH}"
    _MOZ="firefox-${_VERSION}/-moz_${_BRANCH}-"
    _BRANDED="firefox-${_VERSION}/_branded_"
    _PATCHED="firefox-${_VERSION}/_patched_"
    _MASTER="firefox-${_VERSION}/master"
    _TMP="tmp"  
    for i in ${_UPSTREAM} ${_MOZ} ${_BRANDED} ${_PATCHED} ${_MASTER}; do
        git_gecko_check_branch ${i} || return $?
    done
    
    # Update the upstream
    git_gecko_update_upstream ${1} || return $?
    
    # Update moz
    echo ""
    echo "----------------------"
    echo "Updating ${_MOZ}..."
    echo "----------------------"
    git checkout ${_MOZ} || return $?
    git merge --ff-only ${_UPSTREAM} || return $?

    # Update branding and patches
    for i in ${_BRANDED} ${_PATCHED}; do
        echo ""
        echo "----------------------"
        echo "Updating ${i}..."
        echo "----------------------"
        git checkout ${i} || return $?
        git rebase ${_MOZ} || return $?
    done
    
    # Update master
    echo ""
    echo "----------------------"
    echo "Updating ${_MASTER}..."
    echo "----------------------"
    git checkout ${_MASTER} || return $?
    for i in ${_BRANDED} ${_PATCHED}; do
        git merge -s recursive -X theirs --no-edit ${i} || return $?
    done
    
    # Check against temp branch
    echo ""
    echo "----------------------"
    echo "Checking against ${_TMP}..."
    echo "----------------------"  
    git branch -D ${_TMP} 2>/dev/null
    git checkout -b ${_TMP} ${_MOZ} || return $?
    for i in ${_BRANDED} ${_PATCHED}; do
        git merge -n -s recursive -X theirs --no-edit ${i} >/dev/null || return $?
    done
    git checkout ${_MASTER} || return $?
    if [ $(git diff --name-only ${_TMP} | head -n1 | wc -l) -gt 0 ]; then
        git diff --binary ${_TMP} | git apply -R --whitespace=nowarn --index || return $?
        git commit -m "Bring ${_MASTER} up-to-date with patched ${_MOZ}" || return $?
    fi
    git branch -D ${_TMP} || return $?
}

CMD="${1}"
case "${CMD}" in
    'list')
        shift
        git_gecko_list $@ && exit 0
        ;;
    'reset')
        shift
        git_gecko_reset $@ && exit 0
        ;;
    'update')
        shift
        git_gecko_update $@ && exit 0
        ;;
    'latest')
        shift
        git_gecko_latest $@ && exit 0
        ;;
    *)
        ;;
esac

echo ""
echo "Usage: git-gecko list"
echo "       git-gecko reset"
echo "       git-gecko update <version_num>-<branch_name>"
echo "       git-gecko latest <branch> <version_num>"
echo ""
echo "'list' will just list \"upstream\" branches."
echo ""
echo "'reset' will reset the locally checked-out code to the"
echo "servers"
echo ""
echo "'update' takes a version number (i.e. 36) and a branch name"
echo "(i.e. aurora) - as a single parameter, separated by a "
echo "hyphen (-) - and will update the upstream branch as well"
echo "as the branded, patched, and master branches for that version"
echo ""
echo "'latest' will update the value of <branch> to be identical to"
echo "the merged version for firefox-<version_num>.  It does this"
echo "via merges - rather than rebasing, so it is appropriate for"
echo "branches that get pushed and built from."
echo ""
echo "Specifying 'all' for the version in update will update all"
echo "the available versions."
exit 1